# 哈希表

## 哈希表的原理

使用哈希函数`将键映射到存储桶`。更确切地说，

1. 当我们插入一个新的键时，哈希函数将决定该键应该分配到哪个桶中，并将该键存储在相应的桶中；
2. 当我们想要搜索一个键时，哈希表将使用相同的哈希函数来查找对应的桶，并只在特定的桶中进行搜索。



示例

![](E:\Work&study\究极学习\Data-Structures-and-Algorithm-Analysis-in-C\.git\Data-Structures-and-Algorithm-Analysis-in-C\screen-shot-2018-02-19-at-183537.png)

在示例中，我们使用 `y = x ％ 5` 作为哈希函数。让我们使用这个例子来完成

插入和搜索策略:

1. 插入：我们通过哈希函数解析键，将它们映射到相应的桶中。
   - 例如，1987 分配给桶 2，而 24 分配给桶 4。
2. 搜索：我们通过相同的哈希函数解析键，并仅在特定存储桶中搜索。
   - 如果我们搜索 1987，我们将使用相同的哈希函数将1987 映射到 2。因此我们在桶 2 中搜索，我们在那个桶中成功找到了 1987。
   - 例如，如果我们搜索 23，将映射 23 到 3，并在桶 3 中搜索。我们发现 23 不在桶 3 中，这意味着 23 不在哈希表中。



#### 哈希函数

哈希函数是哈希表中最重要的组件，该哈希表用于将键映射到特定的桶。在上一篇文章中的示例中，我们使用 `y = x % 5` 作为散列函数，其中 `x` 是键值，`y` 是分配的桶的索引。

散列函数将取决于`键值的范围`和`桶的数量。`

下面是一些哈希函数的示例:

![screen-shot-2018-05-04-at-145454](E:\Work&study\究极学习\Data-Structures-and-Algorithm-Analysis-in-C\.git\Data-Structures-and-Algorithm-Analysis-in-C\screen-shot-2018-05-04-at-145454.png)

哈希函数的设计是一个开放的问题。其思想是尽可能将键分配到桶中，理想情况下，完美的哈希函数将是键和桶之间的一对一映射。然而，在大多数情况下，哈希函数并不完美，它需要在桶的数量和桶的容量之间进行权衡。



#### 冲突解决

理想情况下，如果我们的哈希函数是完美的一对一映射，我们将不需要处理冲突。不幸的是，在大多数情况下，冲突几乎是不可避免的。例如，在我们之前的哈希函数（*y = x ％ 5*）中，1987 和 2 都分配给了桶 2，这是一个`冲突`。

冲突解决算法应该解决以下几个问题：

1. 如何组织在同一个桶中的值？
2. 如果为同一个桶分配了太多的值，该怎么办？
3. 如何在特定的桶中搜索目标值？

根据我们的哈希函数，这些问题与`桶的容量`和可能映射到`同一个桶`的`键的数目`有关。

让我们假设存储最大键数的桶有 `N` 个键。

通常，如果 *N* 是常数且很小，我们可以简单地使用一个数组将键存储在同一个桶中。如果 *N* 是可变的或很大，我们可能需要使用`高度平衡的二叉树`来代替.。



#### LC 设计哈希表

不使用任何内建的哈希表库设计一个哈希集合

具体地说，你的设计应该包含以下的功能

- `add(value)`：向哈希集合中插入一个值。
- `contains(value)` ：返回哈希集合中是否存在这个值。
- `remove(value)`：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。
- 示例:

```c
MyHashSet hashSet = new MyHashSet();
hashSet.add(1);         
hashSet.add(2);         
hashSet.contains(1);    // 返回 true
hashSet.contains(3);    // 返回 false (未找到)
hashSet.add(2);          
hashSet.contains(2);    // 返回 true
hashSet.remove(2);          
hashSet.contains(2);    // 返回  false (已经被删除)
```

注意:

- 所有的值都在 `[0, 1000000]`的范围内。
- 操作的总数目在`[1, 10000]`范围内。
- 不要使用内建的哈希集合库。



##### 概述

为了实现 HashSet 数据结构，有两个关键的问题，即哈希函数和冲突处理。

- 哈希函数：目的是分配一个地址存储值。理想情况下，每个值都应该有一个对应唯一的散列值。
- 冲突处理：哈希函数的本质就是从 A 映射到 B。但是多个 A 值可能映射到相同的 B。这就是碰撞。因此，我们需要有对应的策略来解决碰撞。总的来说，有以下几种策略解决冲突：
  - 单独链接法：对于相同的散列值，我们将它们放到一个桶中，每个桶是相互独立的。
  - 开放地址法：每当有碰撞， 则根据我们探查的策略找到一个空的槽为止。
  - 双散列法：使用两个哈希函数计算散列值，选择碰撞更少的地址。



#### 方法一：单独链表法

哈希函数的共同特点是使用模运算符。hash=value mod base。其中，base将决定HashSet中的桶数。从理论上讲，桶越多（因此空间会越大）越不太可能发生碰撞。base的选择是空间和碰撞之间的权衡。此外，使用质数作为base是一个明智的选择。例如769，可以减少潜在的碰撞。

![](E:\Work&study\究极学习\Data-Structures-and-Algorithm-Analysis-in-C\.git\Data-Structures-and-Algorithm-Analysis-in-C\aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNzA1LzcwNV9saW5rZWRfbGlzdC5wbmc.png)

对于桶的设计，我们有几种选择，可以使用数组来存储桶的所有值。然而数组的一个缺点是需要 \mathcal{O}(N)O(*N*) 的时间复杂度进行插入和删除，而不是 O(1)。

因为任何的更新操作，我们首先是需要扫描整个桶为了避免重复。选择链表来存储桶的所有值是更好的选择，插入和删除具有常数的时间复杂度。

```c
#pragma once
#define HashMaxSize 1000		//宏定义哈希表的最大容量
#define LoadFactor 0.8			//宏定义负载因子,用于表示哈希表的负载能力.

typedef int KeyType;
typedef int ValueType;
typedef size_t(*HashFunc)(KeyType key);			//重定义哈希表

typedef enum Stat			//用于表示每个元素的状态
{
    Empty,		//空,当前没有值
    Valid,		//有效,当前的值有效
    Invalid		//非空但无效,表示当前结点被删除
}Stat;

typedef struct HashElem			//哈希表的元素结构体
{
    KeyType Key;
    ValueType Value;
    Stat stat;
}HashElem;

typedef struct HashTable		//哈希表
{
    HashElem data[HashMaxSize];
    size_t size;
    HashFunc hashfunc;
}HashTable;


0
```

