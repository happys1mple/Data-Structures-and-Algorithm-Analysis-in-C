# 线性表

### 线性表的定义

线性表示是具有**相同特性**数据元素的一个**有限**序列。该序列中所含元素的**个数**叫做线性表的长度，用n（n≥0）表示。注意，n可以等于零，表示线性表示一个空表。

### 线性表的逻辑特性

只有一个表头元素，只有一个表尾元素，表头元素没有前驱，表尾元素没有后继，除表头和表尾元素之外，其他元素只有一个直接前驱，也只有一个直接后继。

### 线性表的存储结构

**顺序存储结构，链式存储结构**。前者称为**顺序表**，后者称为**链表**。

##### 顺序表

所有元素按照其逻辑顺序,依次存储到从指定的存储位置开始的一块**连续**的存储空间中。

##### 链表

每个节点不仅包含所存元素的信息，还包含元素之间元素之间逻辑关系的信息。

##### 两种存储结构的比较

顺序表的特性——**随机访问特性**，**要求占用连续的存储空间**

链表的特性——**不支持随机访问**，**节点的存储空间利用率交顺序表稍低一些**

链表的节点可以散落在内存中的任意位置.

链表支持存储空间的**动态分配**

**顺序表做插入操作的时候要移动多个元素**

**在链表中进行操作无须移动元素**



## 链表的5种形式

### 单链表：每个结点除了包含数据域外，还包含一个指针域，用以指向器后继结点。

- 带头结点的单链表中，头指针head指向头结点，头结点的值域不含任何信息，从头结点的后继结点开始存储数据结构。**head->next等于NULL的时候，链表**

- 不带头结点的单链表中的头指针head直接指向开始结点，当head等于NULL的时候，链表为空。

### 双链表：在单链表结点上增添了一个指针域，指向当前指针的前驱

双链表也分为带头结点的双链表和不带头结点的双链表，类似于单链表。

### 循环单链表：将单链表的最后一个指针域（空指针）指向链表中的第一个节点

带头结点的循环单链表，当head等于head->next时，链表为空；不带头结点的循环单链表，当head等于NULL时，链表为空。

### 循环双链表：构造源自双链表

以下四句中的任意一句为真，都可以判断循环双链表为空

```c
head->next == head;
head->prior == head;
head->next == head && head->prior == head;
head->next == head || head->prior == head;
```

### 静态链表：借助一维数组来表示

一般链表结点空间来自于整个内存，静态链表则来自于一个结构体数组。数组中的每一个节点含有两个分量：一个是元素分量data；另一个是指针分量，指示了当前结点的直接后继结点在数组中的位置





### 基于空间的比较

1. 存储分配的方式：顺序表的存储空间是一次性分配的，链表的存储空间是多长分配的。

2. 存储密度（存储密度=结点值域所占的存储量/结点结构所占的存储总量）：

   顺序表的存储密度=1，链表的存储密度<1（因为结点中有指针域）



### 基于时间的比较

1. 存取方式：顺序表可以随机存取，也可以**顺序存取**；链表只能**顺序存取**
2. 插入/删除时移动元素的个数：顺序表平均需要移动近一半元素；链表不需要移动元素，只需要修改指针



### 对顺序表进行插入和删除算法时间复杂度分析

1. 求概率：任何一个位置被插入元素的概率都为p=1/n

2. 求对应于每个插入位置需要移动的元素个数：

   把新元素插入在表中第i个元素之后，则需要将第i个元素之后的所有元素往后移动一个位置，因此移动元素个数为n-i